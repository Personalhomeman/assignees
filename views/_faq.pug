mixin faq-entry(id, title, enabled)
  .panel.panel-default
    div(
      id=`heading-${id}`,
      class='panel-heading',
      role='tab'
    )
      h4.panel-title
        a(
          data-toggle='collapse',
          data-parent='#faq',
          href=`#${id}`,
          role='button',
          aria-expanded='true',
          aria-controls=id
        ) #{title}
    div(
      id=id,
      class=`panel-collapse collapse${!!enabled ? ' in' : ''}`,
      role='tabpanel',
      aria-labelledby=`heading-${id}`
    )
      .panel-body
        block


h3.text-center Frequently Asked Questions
br
div(
  id='faq'
  class='panel-group',
  role='tablist',
  aria-multiselectable='true'
)
  +faq-entry('why', 'Why should I use this service?', true)
    p.text-justify
      | Glad you asked! We believe that code reviews are one of the best tools to
      | improve quality in software development. There are plenty of services
      | available for performing code reviews and even GitHub introduced
      | #[a(href='https://github.com/features/projects/codereview') their own mechanism].
      | Yet, assigning the right people to do code reviews is tedious, hence
      | #[+project-name].
    p.text-justify
      | To go a step further, we think that code reviews allow your collaborators
      | to take ownership over your projects. #[em "With great power comes great responsibility"],
      | said someone once. We have worked with people from different backgrounds
      | and code reviews became our silver bullet to involve them. People become more
      | engaged and efficient when you trust them, you should try!

  +faq-entry('how', 'How does that work?')
    p.text-justify
      | #[+project-name] registers a #[a(href='https://developer.github.com/webhooks/') webhook]
      | on each project you decide to enable in your personal interface. This hook allows
      | #[+project-name] to be notified when a new Pull Request is opened. Then,
      | #[+project-name] selects and assigns the reviewers for this Pull Request,
      | among a list of potential reviewers. You can configure the upper limit of
      | reviewers to assign, and #[+project-name] will do her best to assign them.
    p.text-justify
      | Currently, #[+project-name] randomly picks the reviewers among all the collaborators
      | of the project (excluding the author of the Pull Request).
      | In the near future, the selection will be refined to select the best reviewers,
      | #[em i.e.] the people who contributed to similar parts of the patch proposed
      | within the Pull Request.

  +faq-entry('scopes', 'Why do you ask for GitHub permissions when I sign in?')
    p.text-justify
      | When you sign in to #[+project-name], we ask for permissions to access some of your data on GitHub.
      | We need such permissions to provide you the list of your organizations and repositories so
      | that you can enable #[+project-name] on any of your repositories in a simple manner.
      | We automatically setup #[+project-name] on your repositories as soon as you "enable" using #[+project-name]
      | on them. Reviewers get assigned on your behalf. Let's review the different "scopes" (the
      | term used by GitHub to sort the different permissions you can grant to applications like
      | #[+project-name]):
    p.text-justify
      ul
        li
          | We ask for the #[code user:email] scope to retrieve your email address and create
          | #[a(href='/account') your account] on #[+project-name]. You can update your information whenever
          | you want, and all the information we read from your GitHub profile are displayed;
        li
          | To show you all of your repositories, including the ones from any organization you’re part of,
          | we need the #[code read:org]. The GitHub API hides any organizations
          | you’re a private member of without this scope. So to make sure we show
          | you all of your repositories, we require this scope. We cannot read the data or code of your
          | repositories with this scope;
        li
          | Getting reviewers on your projects with #[+project-name] is as simple as enabling it and
          | waiting for a new Pull Request. We take care of the rest. The #[code write:repo_hook]
          | scope allows us to create and update a webhook so that #[+project-name] is notified from GitHub
          | on new Pull Requests;
        li
          | #[strong If you include private repositories], then we need the #[code repo] scope.
          | We need this level of access because GitHub does not provide the equivalent of
          | #[code read:org] scope for private repositories.
