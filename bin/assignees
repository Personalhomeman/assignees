#!/usr/bin/env node
const program = require('commander');
const chalk = require('chalk');

const logger = require('../helpers/logger').prependableLogger(
  console.log,
  chalk.green('SUCCESS'),
  chalk.red('NOPE')
);
const mongoose = require('../config/mongoose')(logger);

const findReviewersTask = require('../tasks/findReviewers');
const listUserFeaturesTask = require('../tasks/listUserFeatures');
const updateUserFeatureTask = require('../tasks/updateUserFeature');
const disableProjectTask = require('../tasks/disableProject');
const disableProjectsTask = require('../tasks/disableProjects');
const listOwnersTask = require('../tasks/listOwners');
const listEmailsTask = require('../tasks/listEmails');

const updateUserFeatureAction = operation => async (username, feature) => {
  const updateUserFeature = updateUserFeatureTask.configure({ logger });
  try {
    await updateUserFeature(username, feature, operation);
  } catch(e) {
    logger.error(chalk.red(e.stack));
    process.exitCode = 1;
  } finally {
    mongoose.connection.close();
  }
};

program
  .version(require('../package.json').version)
;

program
  .command('feature:add [username] [feature]')
  .description('add feature to user')
  .action(updateUserFeatureAction(updateUserFeatureTask.ADD))
;

program
  .command('feature:remove [username] [feature]')
  .description('remove feature to user')
  .action(updateUserFeatureAction(updateUserFeatureTask.REMOVE))
;

program
  .command('feature:list [username...]')
  .description('list enabled features of user')
  .action(async (usernames) => {
    const listUserFeatures = listUserFeaturesTask.configure({ logger });

    try {
      await Promise.all(usernames.map(username => listUserFeatures(username)));
    } catch(e) {
      logger.error(chalk.red(e.stack));
      process.exitCode = 1;
    } finally {
      mongoose.connection.close();
    }
  })
;

program
  .command('pr:process [repositoryId] [number] [author]')
  .description('process pull request')
  .option('--dryrun', 'do not create review request')
  .action(async (repositoryId, number, author, options) => {
    const dryrun = options.dryrun || false;

    if (dryrun) {
      logger.info('DRY RUN mode enabled');
    }

    const findReviewers = findReviewersTask.configure({
      maxPullRequestFilesToProcess: process.env.maxPullRequestFilesToProcess || 5,
      nbCommitsToRetrieve: process.env.nbCommitsToRetrieve || 30,
      createReviewRequest: dryrun === false,
    });

    try {
      await findReviewers(repositoryId, number, author, logger);

      if (!dryrun) {
        logger.info('reviewer(s) assigned');
      }
    } catch(e) {
      logger.error(chalk.red(e.stack));
      process.exitCode = 1;
    } finally {
      mongoose.connection.close();
    }
  })
;

program
  .command('project:disable [owner] [repo]')
  .description('disable a project completely')
  .option('--force', 'mark a project as disabled')
  .action(async (owner, repo, { force }) => {
    const disableProject = disableProjectTask.configure({ logger });

    try {
      await disableProject({ owner, repo, force });
    } catch(e) {
      logger.error(chalk.red(e.stack));
      process.exitCode = 1;
    } finally {
      mongoose.connection.close();
    }
  })
;

program
  .command('project:disable-all [owner]')
  .description('disable all projects of a user or organization completely')
  .action(async (owner, repo) => {
    const disableProjects = disableProjectsTask.configure({ logger });

    try {
      await disableProjects(owner);
    } catch(e) {
      logger.error(chalk.red(e.stack));
      process.exitCode = 1;
    } finally {
      mongoose.connection.close();
    }
  })
;

program
  .command('project:list-owners')
  .description('list all the owners in database')
  .option('--as-list', 'output as list separated by spaces')
  .action(async (options) => {
    const listOwners = listOwnersTask.configure({ logger });

    try {
      await listOwners(options.asList);
    } catch(e) {
      logger.error(chalk.red(e.stack));
      process.exitCode = 1;
    } finally {
      mongoose.connection.close();
    }
  })
;

program
  .command('project:list-emails')
  .description('list all the emails in database')
  .option('--as-list', 'output as list separated by spaces')
  .action(async (options) => {
    const listEmails = listEmailsTask.configure({ logger });

    try {
      await listEmails(options.asList);
    } catch(e) {
      logger.error(chalk.red(e.stack));
      process.exitCode = 1;
    } finally {
      mongoose.connection.close();
    }
  })
;

program.parse(process.argv);

if (!program.args.length) {
  program.help();
}
